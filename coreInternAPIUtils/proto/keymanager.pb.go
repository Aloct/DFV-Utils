// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: keymanager.proto

package keyManagerProto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	AssignedId    int32                  `protobuf:"varint,2,opt,name=assigned_id,json=assignedId,proto3" json:"assigned_id,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_keymanager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_keymanager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_keymanager_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Status) GetAssignedId() int32 {
	if x != nil {
		return x.AssignedId
	}
	return 0
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RegisterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to RegisterResult:
	//
	//	*RegisterResponse_Status
	//	*RegisterResponse_DekResult
	RegisterResult isRegisterResponse_RegisterResult `protobuf_oneof:"register_result"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_keymanager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keymanager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_keymanager_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterResponse) GetRegisterResult() isRegisterResponse_RegisterResult {
	if x != nil {
		return x.RegisterResult
	}
	return nil
}

func (x *RegisterResponse) GetStatus() *Status {
	if x != nil {
		if x, ok := x.RegisterResult.(*RegisterResponse_Status); ok {
			return x.Status
		}
	}
	return nil
}

func (x *RegisterResponse) GetDekResult() *DEKBlindResult {
	if x != nil {
		if x, ok := x.RegisterResult.(*RegisterResponse_DekResult); ok {
			return x.DekResult
		}
	}
	return nil
}

type isRegisterResponse_RegisterResult interface {
	isRegisterResponse_RegisterResult()
}

type RegisterResponse_Status struct {
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3,oneof"` // Used for KEK
}

type RegisterResponse_DekResult struct {
	DekResult *DEKBlindResult `protobuf:"bytes,2,opt,name=dek_result,json=dekResult,proto3,oneof"` // Used for DEKs
}

func (*RegisterResponse_Status) isRegisterResponse_RegisterResult() {}

func (*RegisterResponse_DekResult) isRegisterResponse_RegisterResult() {}

type KEKAndDefaultDEKs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*KEKAndDefaultDEKs_Kek
	//	*KEKAndDefaultDEKs_Dek
	Data          isKEKAndDefaultDEKs_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KEKAndDefaultDEKs) Reset() {
	*x = KEKAndDefaultDEKs{}
	mi := &file_keymanager_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KEKAndDefaultDEKs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KEKAndDefaultDEKs) ProtoMessage() {}

func (x *KEKAndDefaultDEKs) ProtoReflect() protoreflect.Message {
	mi := &file_keymanager_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KEKAndDefaultDEKs.ProtoReflect.Descriptor instead.
func (*KEKAndDefaultDEKs) Descriptor() ([]byte, []int) {
	return file_keymanager_proto_rawDescGZIP(), []int{2}
}

func (x *KEKAndDefaultDEKs) GetData() isKEKAndDefaultDEKs_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *KEKAndDefaultDEKs) GetKek() *KEKRegistration {
	if x != nil {
		if x, ok := x.Data.(*KEKAndDefaultDEKs_Kek); ok {
			return x.Kek
		}
	}
	return nil
}

func (x *KEKAndDefaultDEKs) GetDek() *DEKDefaultRegistration {
	if x != nil {
		if x, ok := x.Data.(*KEKAndDefaultDEKs_Dek); ok {
			return x.Dek
		}
	}
	return nil
}

type isKEKAndDefaultDEKs_Data interface {
	isKEKAndDefaultDEKs_Data()
}

type KEKAndDefaultDEKs_Kek struct {
	Kek *KEKRegistration `protobuf:"bytes,1,opt,name=kek,proto3,oneof"` // Should be sent once
}

type KEKAndDefaultDEKs_Dek struct {
	Dek *DEKDefaultRegistration `protobuf:"bytes,2,opt,name=dek,proto3,oneof"` // Optional, multiple
}

func (*KEKAndDefaultDEKs_Kek) isKEKAndDefaultDEKs_Data() {}

func (*KEKAndDefaultDEKs_Dek) isKEKAndDefaultDEKs_Data() {}

type KEKGetter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KekDb         string                 `protobuf:"bytes,1,opt,name=kek_db,json=kekDb,proto3" json:"kek_db,omitempty"`
	UserBlind     string                 `protobuf:"bytes,2,opt,name=user_blind,json=userBlind,proto3" json:"user_blind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KEKGetter) Reset() {
	*x = KEKGetter{}
	mi := &file_keymanager_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KEKGetter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KEKGetter) ProtoMessage() {}

func (x *KEKGetter) ProtoReflect() protoreflect.Message {
	mi := &file_keymanager_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KEKGetter.ProtoReflect.Descriptor instead.
func (*KEKGetter) Descriptor() ([]byte, []int) {
	return file_keymanager_proto_rawDescGZIP(), []int{3}
}

func (x *KEKGetter) GetKekDb() string {
	if x != nil {
		return x.KekDb
	}
	return ""
}

func (x *KEKGetter) GetUserBlind() string {
	if x != nil {
		return x.UserBlind
	}
	return ""
}

type KEKRegistration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scope         string                 `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	IdParams      *DEKGetter             `protobuf:"bytes,2,opt,name=id_params,json=idParams,proto3" json:"id_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KEKRegistration) Reset() {
	*x = KEKRegistration{}
	mi := &file_keymanager_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KEKRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KEKRegistration) ProtoMessage() {}

func (x *KEKRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_keymanager_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KEKRegistration.ProtoReflect.Descriptor instead.
func (*KEKRegistration) Descriptor() ([]byte, []int) {
	return file_keymanager_proto_rawDescGZIP(), []int{4}
}

func (x *KEKRegistration) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *KEKRegistration) GetIdParams() *DEKGetter {
	if x != nil {
		return x.IdParams
	}
	return nil
}

type DEKGetter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InnerScope    string                 `protobuf:"bytes,1,opt,name=inner_scope,json=innerScope,proto3" json:"inner_scope,omitempty"`
	KekDb         string                 `protobuf:"bytes,2,opt,name=kek_db,json=kekDb,proto3" json:"kek_db,omitempty"`
	UserBlind     string                 `protobuf:"bytes,3,opt,name=user_blind,json=userBlind,proto3" json:"user_blind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DEKGetter) Reset() {
	*x = DEKGetter{}
	mi := &file_keymanager_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DEKGetter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DEKGetter) ProtoMessage() {}

func (x *DEKGetter) ProtoReflect() protoreflect.Message {
	mi := &file_keymanager_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DEKGetter.ProtoReflect.Descriptor instead.
func (*DEKGetter) Descriptor() ([]byte, []int) {
	return file_keymanager_proto_rawDescGZIP(), []int{5}
}

func (x *DEKGetter) GetInnerScope() string {
	if x != nil {
		return x.InnerScope
	}
	return ""
}

func (x *DEKGetter) GetKekDb() string {
	if x != nil {
		return x.KekDb
	}
	return ""
}

func (x *DEKGetter) GetUserBlind() string {
	if x != nil {
		return x.UserBlind
	}
	return ""
}

type DEKIdentAndKEK struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KekBlind      string                 `protobuf:"bytes,1,opt,name=kek_blind,json=kekBlind,proto3" json:"kek_blind,omitempty"`
	Kek           []byte                 `protobuf:"bytes,2,opt,name=kek,proto3" json:"kek,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DEKIdentAndKEK) Reset() {
	*x = DEKIdentAndKEK{}
	mi := &file_keymanager_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DEKIdentAndKEK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DEKIdentAndKEK) ProtoMessage() {}

func (x *DEKIdentAndKEK) ProtoReflect() protoreflect.Message {
	mi := &file_keymanager_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DEKIdentAndKEK.ProtoReflect.Descriptor instead.
func (*DEKIdentAndKEK) Descriptor() ([]byte, []int) {
	return file_keymanager_proto_rawDescGZIP(), []int{6}
}

func (x *DEKIdentAndKEK) GetKekBlind() string {
	if x != nil {
		return x.KekBlind
	}
	return ""
}

func (x *DEKIdentAndKEK) GetKek() []byte {
	if x != nil {
		return x.Kek
	}
	return nil
}

type DEKDefaultRegistration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InnerScope    string                 `protobuf:"bytes,1,opt,name=inner_scope,json=innerScope,proto3" json:"inner_scope,omitempty"`
	Scope         string                 `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DEKDefaultRegistration) Reset() {
	*x = DEKDefaultRegistration{}
	mi := &file_keymanager_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DEKDefaultRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DEKDefaultRegistration) ProtoMessage() {}

func (x *DEKDefaultRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_keymanager_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DEKDefaultRegistration.ProtoReflect.Descriptor instead.
func (*DEKDefaultRegistration) Descriptor() ([]byte, []int) {
	return file_keymanager_proto_rawDescGZIP(), []int{7}
}

func (x *DEKDefaultRegistration) GetInnerScope() string {
	if x != nil {
		return x.InnerScope
	}
	return ""
}

func (x *DEKDefaultRegistration) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DEKRegistration struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	KekId         *KEKGetter              `protobuf:"bytes,1,opt,name=kek_id,json=kekId,proto3" json:"kek_id,omitempty"`
	DekId         *DEKDefaultRegistration `protobuf:"bytes,2,opt,name=dek_id,json=dekId,proto3" json:"dek_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DEKRegistration) Reset() {
	*x = DEKRegistration{}
	mi := &file_keymanager_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DEKRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DEKRegistration) ProtoMessage() {}

func (x *DEKRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_keymanager_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DEKRegistration.ProtoReflect.Descriptor instead.
func (*DEKRegistration) Descriptor() ([]byte, []int) {
	return file_keymanager_proto_rawDescGZIP(), []int{8}
}

func (x *DEKRegistration) GetKekId() *KEKGetter {
	if x != nil {
		return x.KekId
	}
	return nil
}

func (x *DEKRegistration) GetDekId() *DEKDefaultRegistration {
	if x != nil {
		return x.DekId
	}
	return nil
}

type DEKBlindResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	KekBlind      string                 `protobuf:"bytes,2,opt,name=kek_blind,json=kekBlind,proto3" json:"kek_blind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DEKBlindResult) Reset() {
	*x = DEKBlindResult{}
	mi := &file_keymanager_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DEKBlindResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DEKBlindResult) ProtoMessage() {}

func (x *DEKBlindResult) ProtoReflect() protoreflect.Message {
	mi := &file_keymanager_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DEKBlindResult.ProtoReflect.Descriptor instead.
func (*DEKBlindResult) Descriptor() ([]byte, []int) {
	return file_keymanager_proto_rawDescGZIP(), []int{9}
}

func (x *DEKBlindResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DEKBlindResult) GetKekBlind() string {
	if x != nil {
		return x.KekBlind
	}
	return ""
}

var File_keymanager_proto protoreflect.FileDescriptor

const file_keymanager_proto_rawDesc = "" +
	"\n" +
	"\x10keymanager.proto\x12\n" +
	"keymanager\"d\n" +
	"\x06Status\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x1f\n" +
	"\vassigned_id\x18\x02 \x01(\x05R\n" +
	"assignedId\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"\x90\x01\n" +
	"\x10RegisterResponse\x12,\n" +
	"\x06status\x18\x01 \x01(\v2\x12.keymanager.StatusH\x00R\x06status\x12;\n" +
	"\n" +
	"dek_result\x18\x02 \x01(\v2\x1a.keymanager.DEKBlindResultH\x00R\tdekResultB\x11\n" +
	"\x0fregister_result\"\x84\x01\n" +
	"\x11KEKAndDefaultDEKs\x12/\n" +
	"\x03kek\x18\x01 \x01(\v2\x1b.keymanager.KEKRegistrationH\x00R\x03kek\x126\n" +
	"\x03dek\x18\x02 \x01(\v2\".keymanager.DEKDefaultRegistrationH\x00R\x03dekB\x06\n" +
	"\x04data\"A\n" +
	"\tKEKGetter\x12\x15\n" +
	"\x06kek_db\x18\x01 \x01(\tR\x05kekDb\x12\x1d\n" +
	"\n" +
	"user_blind\x18\x02 \x01(\tR\tuserBlind\"[\n" +
	"\x0fKEKRegistration\x12\x14\n" +
	"\x05scope\x18\x01 \x01(\tR\x05scope\x122\n" +
	"\tid_params\x18\x02 \x01(\v2\x15.keymanager.DEKGetterR\bidParams\"b\n" +
	"\tDEKGetter\x12\x1f\n" +
	"\vinner_scope\x18\x01 \x01(\tR\n" +
	"innerScope\x12\x15\n" +
	"\x06kek_db\x18\x02 \x01(\tR\x05kekDb\x12\x1d\n" +
	"\n" +
	"user_blind\x18\x03 \x01(\tR\tuserBlind\"?\n" +
	"\x0eDEKIdentAndKEK\x12\x1b\n" +
	"\tkek_blind\x18\x01 \x01(\tR\bkekBlind\x12\x10\n" +
	"\x03kek\x18\x02 \x01(\fR\x03kek\"O\n" +
	"\x16DEKDefaultRegistration\x12\x1f\n" +
	"\vinner_scope\x18\x01 \x01(\tR\n" +
	"innerScope\x12\x14\n" +
	"\x05scope\x18\x02 \x01(\tR\x05scope\"z\n" +
	"\x0fDEKRegistration\x12,\n" +
	"\x06kek_id\x18\x01 \x01(\v2\x15.keymanager.KEKGetterR\x05kekId\x129\n" +
	"\x06dek_id\x18\x02 \x01(\v2\".keymanager.DEKDefaultRegistrationR\x05dekId\"=\n" +
	"\x0eDEKBlindResult\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tkek_blind\x18\x02 \x01(\tR\bkekBlind2\xf4\x01\n" +
	"\n" +
	"KeyManager\x12N\n" +
	"\x19DecryptKEKAndGetReference\x12\x15.keymanager.DEKGetter\x1a\x1a.keymanager.DEKIdentAndKEK\x12N\n" +
	"\vRegisterKEK\x12\x1d.keymanager.KEKAndDefaultDEKs\x1a\x1c.keymanager.RegisterResponse(\x010\x01\x12F\n" +
	"\vRegisterDEK\x12\x1b.keymanager.DEKRegistration\x1a\x1a.keymanager.DEKBlindResultB5Z3github.com/Aloct/DFV/internAPIUtils/keyManagerProtob\x06proto3"

var (
	file_keymanager_proto_rawDescOnce sync.Once
	file_keymanager_proto_rawDescData []byte
)

func file_keymanager_proto_rawDescGZIP() []byte {
	file_keymanager_proto_rawDescOnce.Do(func() {
		file_keymanager_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_keymanager_proto_rawDesc), len(file_keymanager_proto_rawDesc)))
	})
	return file_keymanager_proto_rawDescData
}

var file_keymanager_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_keymanager_proto_goTypes = []any{
	(*Status)(nil),                 // 0: keymanager.Status
	(*RegisterResponse)(nil),       // 1: keymanager.RegisterResponse
	(*KEKAndDefaultDEKs)(nil),      // 2: keymanager.KEKAndDefaultDEKs
	(*KEKGetter)(nil),              // 3: keymanager.KEKGetter
	(*KEKRegistration)(nil),        // 4: keymanager.KEKRegistration
	(*DEKGetter)(nil),              // 5: keymanager.DEKGetter
	(*DEKIdentAndKEK)(nil),         // 6: keymanager.DEKIdentAndKEK
	(*DEKDefaultRegistration)(nil), // 7: keymanager.DEKDefaultRegistration
	(*DEKRegistration)(nil),        // 8: keymanager.DEKRegistration
	(*DEKBlindResult)(nil),         // 9: keymanager.DEKBlindResult
}
var file_keymanager_proto_depIdxs = []int32{
	0,  // 0: keymanager.RegisterResponse.status:type_name -> keymanager.Status
	9,  // 1: keymanager.RegisterResponse.dek_result:type_name -> keymanager.DEKBlindResult
	4,  // 2: keymanager.KEKAndDefaultDEKs.kek:type_name -> keymanager.KEKRegistration
	7,  // 3: keymanager.KEKAndDefaultDEKs.dek:type_name -> keymanager.DEKDefaultRegistration
	5,  // 4: keymanager.KEKRegistration.id_params:type_name -> keymanager.DEKGetter
	3,  // 5: keymanager.DEKRegistration.kek_id:type_name -> keymanager.KEKGetter
	7,  // 6: keymanager.DEKRegistration.dek_id:type_name -> keymanager.DEKDefaultRegistration
	5,  // 7: keymanager.KeyManager.DecryptKEKAndGetReference:input_type -> keymanager.DEKGetter
	2,  // 8: keymanager.KeyManager.RegisterKEK:input_type -> keymanager.KEKAndDefaultDEKs
	8,  // 9: keymanager.KeyManager.RegisterDEK:input_type -> keymanager.DEKRegistration
	6,  // 10: keymanager.KeyManager.DecryptKEKAndGetReference:output_type -> keymanager.DEKIdentAndKEK
	1,  // 11: keymanager.KeyManager.RegisterKEK:output_type -> keymanager.RegisterResponse
	9,  // 12: keymanager.KeyManager.RegisterDEK:output_type -> keymanager.DEKBlindResult
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_keymanager_proto_init() }
func file_keymanager_proto_init() {
	if File_keymanager_proto != nil {
		return
	}
	file_keymanager_proto_msgTypes[1].OneofWrappers = []any{
		(*RegisterResponse_Status)(nil),
		(*RegisterResponse_DekResult)(nil),
	}
	file_keymanager_proto_msgTypes[2].OneofWrappers = []any{
		(*KEKAndDefaultDEKs_Kek)(nil),
		(*KEKAndDefaultDEKs_Dek)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_keymanager_proto_rawDesc), len(file_keymanager_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_keymanager_proto_goTypes,
		DependencyIndexes: file_keymanager_proto_depIdxs,
		MessageInfos:      file_keymanager_proto_msgTypes,
	}.Build()
	File_keymanager_proto = out.File
	file_keymanager_proto_goTypes = nil
	file_keymanager_proto_depIdxs = nil
}
